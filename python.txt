munikumar@DESKTOP-UMOOSQ5:~$ python3
Python 3.8.10 (default, Jun  2 2021, 10:49:15)
[GCC 9.4.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>>
>>> 3+3
6
>>> 3*4
12
>>> $-3
  File "<stdin>", line 1
    $-3
    ^
SyntaxError: invalid syntax
>>> 4-3
1
>>> 4%8
4
>>> name='Munikumar'
>>> location='kerala'
>>> print('my name is '+name+' working at '+location)
my name is Munikumar working at kerala
>>> n=20
>>> if(n<10):
...     print(n, 'is a single digist number')
... else:
...     print(n, 'is a multiple digist number')
...
20 is a multiple digist number
>>> no=454
>>> if(no<10):
...     print(n, 'is a one digist number')
... elif(no<100):
...     print(n, 'is a two digist number')
... elif(no<1000):
...     print(n, 'is a three digist number')
... elif(no>1000):
...     print(n, 'is a multi digist number')
...
20 is a three digist number
>>> no=454
>>> if(no<10):
...     print(no, 'is a multi digist number')
... elif(no<100):
...     print(no, 'is a two digist number')
... elif(no<1000):
...     print(no, 'is a three digist number')
... elif(no>1000):
...     print(no, 'is a multi digist number')
...
454 is a three digist number
>>> names=[ 'apple','mango','goa','palm' ]
>>> names[1]
'mango'
>>> print(names[3])
palm
>>> for name in names:
...     print(name)
...
apple
mango
goa
palm
>>> a,b=0,1
>>> n=10
>>> while(a<n):
...     print(a<n):
  File "<stdin>", line 2
    print(a<n):
              ^
SyntaxError: invalid syntax
>>> a,b=0,1
>>> n=10
>>> while(a<n):
...     print(a, end=' ')
...     a,b=b,a+b
...
0 1 1 2 3 5 8 >>>
>>> class student:
...     def setstudent(self,id,name,course):
...             self.id=id
...             self.name=name
...             self.course=course
...     def getstudent(self):
...             print(self.id," ",self.name," ",self.course)
...
>>> std=student()
>>> std.setstudent(1234,"munikumar","python")
>>> set.getstudent()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: type object 'set' has no attribute 'getstudent'
>>> std=student()
>>> std.setstudent(1234,"munikumar","python")
>>> std.getstudent()
1234   munikumar   python
>>>
>>> class frui:
...     name='apple'
...     def __init__(self,name,price):
...             self.name=name
...             self.price=price
...     def showfruit(self):
...             print(self.name," ",self.price)
...
>>> fru=fruit('mango',100)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'fruit' is not defined
>>> fru= fruit('mango',100)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'fruit' is not defined
>>> fru= fruit('mango', 100)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'fruit' is not defined
>>> class fruit:
...     name='apple'
...     def __init__(self,name,price):
...             self.name=name
...             self.price=price
...     def showfruit(self):
...             print(self.name," ",self.price)
...
>>> fru= fruit('mango', 100)
>>> fru.showfruit()
mango   100
>>> exit
Use exit() or Ctrl-D (i.e. EOF) to exit
>>>











































